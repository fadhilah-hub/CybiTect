import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    _appTheme = _newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: appTheme.orange100,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(16.h),
          ),
          shadowColor: colorScheme.primary,
          elevation: 4,
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            width: 2.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(16.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      floatingActionButtonTheme: FloatingActionButtonThemeData(
        backgroundColor: appTheme.yellow20001,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.gray80003,
          fontSize: 16.fSize,
          fontFamily: 'Josefin Sans',
          fontWeight: FontWeight.w300,
        ),
        bodySmall: TextStyle(
          color: appTheme.gray80003,
          fontSize: 8.fSize,
          fontFamily: 'Josefin Sans',
          fontWeight: FontWeight.w300,
        ),
        displayLarge: TextStyle(
          color: appTheme.gray80002,
          fontSize: 64.fSize,
          fontFamily: 'Josefin Sans',
          fontWeight: FontWeight.w700,
        ),
        headlineSmall: TextStyle(
          color: appTheme.gray80003,
          fontSize: 24.fSize,
          fontFamily: 'Josefin Sans',
          fontWeight: FontWeight.w500,
        ),
        labelLarge: TextStyle(
          color: appTheme.gray80003,
          fontSize: 12.fSize,
          fontFamily: 'Josefin Sans',
          fontWeight: FontWeight.w500,
        ),
        titleLarge: TextStyle(
          color: appTheme.gray80003,
          fontSize: 20.fSize,
          fontFamily: 'Josefin Sans',
          fontWeight: FontWeight.w700,
        ),
        titleMedium: TextStyle(
          color: appTheme.gray80003,
          fontSize: 16.fSize,
          fontFamily: 'Josefin Sans',
          fontWeight: FontWeight.w600,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0X4C000000),
    secondaryContainer: Color(0XFF647057),

    // On colors(text colors)
    onPrimary: Color(0XFF1C1B1F),
    onPrimaryContainer: Color(0XFFA2AA8C),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Gray
  Color get gray300 => Color(0XFFDDDFD1);
  Color get gray400 => Color(0XFFC2C2C2);
  Color get gray40001 => Color(0XFFBCC0B3);
  Color get gray500 => Color(0XFFA1A29F);
  Color get gray50001 => Color(0XFFA4A4A4);
  Color get gray50002 => Color(0XFF9EA788);
  Color get gray700 => Color(0XFF626950);
  Color get gray70001 => Color(0XFF637056);
  Color get gray70002 => Color(0XFF61684F);
  Color get gray70003 => Color(0XFF575E46);
  Color get gray800 => Color(0XFF3A4225);
  Color get gray80001 => Color(0XFF525842);
  Color get gray80002 => Color(0XFF4F573C);
  Color get gray80003 => Color(0XFF404929);

  // Green
  Color get green100 => Color(0XFFD0D6BF);
  Color get green200 => Color(0XFFB3BD9A);

  // LightGreen
  Color get lightGreen50 => Color(0XFFF3F3EB);
  Color get lightGreen600 => Color(0XFF8DA357);

  // Orange
  Color get orange100 => Color(0XFFEADDB3);

  // Pink
  Color get pink100 => Color(0XFFEAB3B3);

  // White
  Color get whiteA700 => Color(0XFFFFFFFF);

  // Yellow
  Color get yellow100 => Color(0XFFFFFCC0);
  Color get yellow200 => Color(0XFFFFF6A7);
  Color get yellow20001 => Color(0XFFFFE9A4);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
